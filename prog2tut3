(*function gets two arguments return 2 tuplr pair*)
fun (a, b) -> (a + 1, b - 1);;
(fun (a, b) -> (a + 1, b - 1))(1,2);;
fun a b -> (a + 1, b - 1);;
(fun a b -> (a + 1, b - 1))1 2;;

let successor = fun x -> x + 1;;
successor 0 ;;(*global*)

let predcessor = fun x -> x - 1 in 
predcessor 0;; (*localy deffined*)


(*function returns another function*)
let anotherfunction y = 
let predecessor = fun x -> x - 1 in predecessor y;;
anotherfunction 10;;

(*recursive function*)
(*factorial*)
let rec factorial n = 
if n <= 1 
then 1 
else n * factorial (n - 1);;
factorial 4;;


(*merge two lists, concatanate*)
[1;2] @ [3;4];;

let rec merge_lists list1 list2 = 
if list1 = [] then list2
else (List.hd list1)::(merge_lists (List.tl list1)(list2));;

merge_lists [1;2] [3;4];;


(*nth Fibonacci number = Fib(n) = Fib(n-1) + Fib(n-2), n >= 3*)
let rec fibonacci n = 
if (n < 3) then 1 else fibonacci (n - 1) + fibonacci (n - 2);;
fibonacci 4;;


(*create a list from 1 to n*)
let rec from_one_to_n n = 
if n = 1 then [1]
else (from_one_to_n (n - 1)) @ [n];;
from_one_to_n 10;



(*reverse given list*)
let rec reverse list = 
if list = [] then []
else reverse (List.tl list) @ [List.hd list];;
reverse [1;2;3;4;5];;


(*pattern matching*)
not false;;

(*NOT logical operator*)
let not2 x = match x with
    | false -> true
    | true -> false;;

not2 true;;


same program 

let not = function
    |false -> true
    |true -> false;;
    
not false;;




(*first function*)
fst(1,"2");;

let first = function
    |( x , _ ) -> x;;

let first2 (x, y) = x;;

let first3 a = match a with
    |(x, _) -> x;;
    
first (1,2);;
first2 (1,2);;
first3 (1,2);;


(*equal function, are two numbers the same*)
let equal = function
    |(x,y) when x = y -> true
    | _ -> false;;

equal (4,5);;



(*write a function for logical implication*)
let (=>) a b = match (a,b) with
    |(true,false) -> false
    | _ -> true;;

(=>) true false;;
(=>) false true;;


(*write a function that calculates length of the list*)
let rec length = function
    | [] -> 0
    |_::t -> 1 + (length t);;

length [1;2;3;4;5;6];;



(*check if element is in list*)
let rec is_in list elm = match list with
    |[] -> false
    |h::t when h = elm -> true
    |_::t -> is_in t elm;;
    
is_in ["banana";"mango";"apple"] "apple";



(*give the position of element in list*)
let rec position list el = match list with
    |[] -> 10000 (*not in list*)
    |h::t when h = el -> 1
    |_::t -> 1 + (position t el);;

position ["banana";"mango";"apple"] "apple";




(*func that checks if a ketter is a vowel*)
let rec vowel chr = match chr with
    | 'a' | 'e' | 'i' | 'o' | 'u' -> true
    | 'A' | 'E' | 'I' | 'O' | 'U' -> true
    |_ -> false;;
    
vowel 'a';;



(*adds up all num in list*)
let rec add = function
    |[] -> 0
    |h::t -> h + (add t);;

add [26;7;7];;
